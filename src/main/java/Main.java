 

import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

import org.apache.log4j.Logger; 
import Util.Log;
 
public class Main {

	final static Logger logger = Logger.getLogger(Main.class);
	static Log log=null;
	public static void main(String args[]) { 
		log = new Log();
		log.info("Start Sha256 Main");
		String data = "a";
		log.info("plain text :"+data);
//		bytesTobyteString(data.getBytes());
		log.info("Hex string "+bytesToHex(data.getBytes()));
		
		String sd= "a\n"
				+ "b";
		log.info("this is _______"+bytesToHex(sd.getBytes()));
		String s1s = "Ko Ko pays 30 to Bo Bo\n"
        		+"9f79124\n"
        		+"43"; 
		String s1= "0499cf05c35c9946b1b87c5a871070a1602e733b040517ec0a5c1dd1a7e8a796";
		//log.info("tts::::: "+sha256(sd));
		  try 
	        {
	            System.out.println("HashCode Generated by SHA-256 for:"); 
	  
	            
	            System.out.println("\n" + s1 + " : " + bytesToHex(getSHA(s1))); 
	            
	            String s2 = "hello world"; 
	            System.out.println("\n" + s2 + " : " + bytesToHex(getSHA(s2))); 
	        }
	        // For specifying wrong message digest algorithms 
	        catch (NoSuchAlgorithmException e) { 
	            System.out.println("Exception thrown for incorrect algorithm: " + e); 
	        } 
		  
		logger.info(log.getlog());
	}
	
	private static String bytesToHex(byte[] hash) {
	    StringBuilder hexString = new StringBuilder(2 * hash.length);
	    for (int i = 0; i < hash.length; i++) {
	        String hex = Integer.toHexString(0xff & hash[i]);
	        if(hex.length() == 1) {
	            hexString.append('0');
	        }
	        hexString.append(hex);
	    }
	    return hexString.toString();
	}
	public static byte[] getSHA(String input) throws NoSuchAlgorithmException
    { 
        // Static getInstance method is called with hashing SHA 
        MessageDigest md = MessageDigest.getInstance("SHA-256"); 
  
        // digest() method called 
        // to calculate message digest of an input 
        // and return array of byte
        input = input.toString();
        return md.digest(input.getBytes(StandardCharsets.UTF_8)); 
    }
	public static String sha256(final String base) {
	    try{
	        final MessageDigest digest = MessageDigest.getInstance("SHA-256");
	        final byte[] hash = digest.digest(base.getBytes("UTF-8"));
	        final StringBuilder hexString = new StringBuilder();
	        for (int i = 0; i < hash.length; i++) {
	            final String hex = Integer.toHexString(0xff & hash[i]);
	            if(hex.length() == 1) 
	              hexString.append('0');
	            hexString.append(hex);
	        }
	        return hexString.toString();
	    } catch(Exception ex){
	       throw new RuntimeException(ex);
	    }
	}
    public static String toHexString(byte[] hash)
    {
        // Convert byte array into signum representation 
        BigInteger number = new BigInteger(1, hash); 
  
        // Convert message digest into hex value 
        StringBuilder hexString = new StringBuilder(number.toString(16)); 
  
       
        // Pad with leading zeros
        while (hexString.length() < 32) 
        { 
            hexString.insert(0, '0'); 
        } 
  
        return hexString.toString(); 
    }
	private static void bytesTobyteString(byte[] hash) {
	 	  
		for (byte theByte : hash)
		{
			log.info(Integer.toHexString(theByte));  
		} 
	}
}
